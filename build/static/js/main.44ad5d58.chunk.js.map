{"version":3,"sources":["protected_routes/authentication.js","protected_routes/protected.routes.js","containers/loader/loader.js","containers/app/App.js","serviceWorker.js","index.js"],"names":["Auth","this","authenticated","cb","ProtectedRoutes","Component","component","rest","render","props","to","pathname","state","from","location","App","style","position","height","width","display","justifyContent","alignItems","type","color","React","Home","lazy","LogIn","Signup","SuccesfullyLogedIn","Fragment","fallback","path","exact","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kJAAMA,E,WACJ,aAAe,oBACbC,KAAKC,eAAgB,E,kDAEjBC,GACJF,KAAKC,eAAgB,EACrBC,M,6BAEKA,GACLF,KAAKC,eAAgB,EACrBC,M,0CAEkBA,GAClBF,KAAKC,eAAgB,EACrBC,Q,KAIW,QAAIH,G,yLCfNI,EAAkB,SAAC,GAAuC,IAA1BC,EAAyB,EAApCC,UAAyBC,EAAW,6BACpE,OACE,kBAAC,IAAD,iBACMA,EADN,CAEEC,OAAQ,SAAAC,GACN,OAA2B,IAAvBT,IAAKE,cACA,kBAACG,EAAcI,GAGpB,kBAAC,IAAD,CACEC,GAAI,CACFC,SAAU,IACVC,MAAO,CACLC,KAAMJ,EAAMK,kB,gECdTC,E,iLAGjB,OACE,yBACEC,MAAO,CACLC,SAAU,WACVC,OAAQ,OACRC,MAAO,OACPC,QAAS,OACTC,eAAgB,SAChBC,WAAY,WAGd,kBAAC,IAAD,CACEC,KAAK,eACLC,MAAM,UACNN,OAAQ,IACRC,MAAO,W,GAlBgBM,IAAMpB,WCGjCqB,EAAOC,gBAAK,kBAAM,sEAClBC,EAAQD,gBAAK,kBAAM,qEACnBE,EAASF,gBAAK,kBAAM,qEACpBG,EAAqBH,gBAAK,kBAC9B,uDAoBaZ,EAlBH,WACV,OACE,kBAAC,IAAMgB,SAAP,KACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAAC5B,UAAWoB,IACjC,kBAAC,EAAD,CAAiBO,KAAK,SAAS3B,UAAWsB,IAC1C,kBAAC,EAAD,CAAiBK,KAAK,UAAU3B,UAAWuB,IAC3C,kBAAC,EAAD,CACEI,KAAK,uBACL3B,UAAWwB,QCTHK,QACW,cAA7BC,OAAOtB,SAASuB,UAEe,UAA7BD,OAAOtB,SAASuB,UAEhBD,OAAOtB,SAASuB,SAASC,MACvB,2D,iBCXNC,IAAS/B,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFgC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.44ad5d58.chunk.js","sourcesContent":["class Auth {\r\n  constructor() {\r\n    this.authenticated = false;\r\n  }\r\n  logIn(cb) {\r\n    this.authenticated = true;\r\n    cb();\r\n  }\r\n  signUp(cb) {\r\n    this.authenticated = true;\r\n    cb();\r\n  }\r\n  successfullyLogedIn(cb) {\r\n    this.authenticated = true;\r\n    cb();\r\n  }\r\n}\r\n\r\nexport default new Auth();\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport Auth from \"./authentication\";\r\nexport const ProtectedRoutes = ({ component: Component, ...rest }) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props => {\r\n        if (Auth.authenticated === true) {\r\n          return <Component {...props} />;\r\n        } else {\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: \"/\",\r\n                state: {\r\n                  from: props.location\r\n                }\r\n              }}\r\n            />\r\n          );\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nexport default class App extends React.Component {\r\n  //other logic\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          height: \"100%\",\r\n          width: \"100%\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\"\r\n        }}\r\n      >\r\n        <Loader\r\n          type=\"MutatingDots\"\r\n          color=\"#f50057\"\r\n          height={100}\r\n          width={100}\r\n          // timeout={3000} //3 secs\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { lazy, Suspense } from \"react\";\r\nimport { ProtectedRoutes } from \"../../protected_routes/protected.routes\";\r\nimport \"./App.css\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Loader from \"../loader/loader\";\r\nconst Home = lazy(() => import(\"../pages/home\"));\r\nconst LogIn = lazy(() => import(\"../pages/login\"));\r\nconst Signup = lazy(() => import(\"../pages/signup\"));\r\nconst SuccesfullyLogedIn = lazy(() =>\r\n  import(\"../../components/successfully_logIn/successfullyLogedIn.jsx\")\r\n);\r\nconst App = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Suspense fallback={<Loader />}>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Home} />\r\n          <ProtectedRoutes path=\"/login\" component={LogIn} />\r\n          <ProtectedRoutes path=\"/signup\" component={Signup} />\r\n          <ProtectedRoutes\r\n            path=\"/successfullyLogedIn\"\r\n            component={SuccesfullyLogedIn}\r\n          />\r\n        </Switch>\r\n      </Suspense>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"typeface-roboto\";\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}